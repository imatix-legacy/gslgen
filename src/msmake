#
#   MS-DOS makefile for iMatix GSLgen Code Generator; compatible with nmake.
#
#   Generated by Otto v2.2 from buildgsl.txt on 100/02/20, 15:35:59
#   For more info see Otto documentation at http://www.imatix.com.
#   Bug reports & questions to <ewen@imatix.com>
#   ---------------------------------------------------------------
#

#   Default values for library, executable and object extensions.
#
LIB     = .lib
EXE     = .exe
OBJ     = .obj

#   Configuration options
#
#   The makefile is configured to use the iMatix "c" batch file to compile
#   link, and archive, to enhance portability.  That batch file contains all
#   compile, link, and archive options.
#
C       = c
LR      = lr
MAKEDEP = makedepend

#   Libraries -- these are the ones that should always cause a relink if they
#   are updated (the executables in a makefile will also depend on any
#   libraries that are built in that Makefile).
#
LIBRARIES =

#   Implicit rules
#

#   Reset the suffixes that will be considered to just our own list.
#
#   Unix make programs use the .SUFFIXES psuedo rule for this

.SUFFIXES:
.SUFFIXES: $(EXE) $(LIB) $(OBJ) .c .d .i .l

#   Objects depend on source files with the same name; and are compiled
#   with the iMatix c script without any arguments.
#
.c$(OBJ):
	$(C) $<

#   .d and .i files do depend on .l files (these are the ones that Libero
#   will build).
#
.l.d:
	$(LR) $<

.l.i:
	$(LR) $<

#
#   Default rule -- all depends on everything.
#   We do this so that we can define the rule at the end.
#
all: everything

#---------------------------------------------------------------------------
libgsl$(LIB)(ggcode$(OBJ)): ggcode$(OBJ)
	$(C) -r libgsl$(LIB) ggcode$(OBJ)

libgsl$(LIB)(ggpars$(OBJ)): ggpars$(OBJ)
	$(C) -r libgsl$(LIB) ggpars$(OBJ)

libgsl$(LIB)(ggeval$(OBJ)): ggeval$(OBJ)
	$(C) -r libgsl$(LIB) ggeval$(OBJ)

libgsl$(LIB)(ggcomm$(OBJ)): ggcomm$(OBJ)
	$(C) -r libgsl$(LIB) ggcomm$(OBJ)

libgsl$(LIB)(ggobjt$(OBJ)): ggobjt$(OBJ)
	$(C) -r libgsl$(LIB) ggobjt$(OBJ)

libgsl$(LIB)(ggfunc$(OBJ)): ggfunc$(OBJ)
	$(C) -r libgsl$(LIB) ggfunc$(OBJ)

libgsl$(LIB)(ggfile$(OBJ)): ggfile$(OBJ)
	$(C) -r libgsl$(LIB) ggfile$(OBJ)

libgsl$(LIB)(ggstrn$(OBJ)): ggstrn$(OBJ)
	$(C) -r libgsl$(LIB) ggstrn$(OBJ)

LIBGSL_LIST = libgsl$(LIB)(ggcode$(OBJ)) libgsl$(LIB)(ggpars$(OBJ)) libgsl$(LIB)(ggeval$(OBJ)) libgsl$(LIB)(ggcomm$(OBJ)) libgsl$(LIB)(ggobjt$(OBJ)) libgsl$(LIB)(ggfunc$(OBJ)) libgsl$(LIB)(ggfile$(OBJ)) libgsl$(LIB)(ggstrn$(OBJ))

# Force the library to be dependant on its bits.
#
libgsl$(LIB): $(LIBGSL_LIST)

gslgen$(EXE): gslgen$(OBJ) $(LIBRARIES) libgsl$(LIB)
	$(C) -L gslgen

everything: libgsl$(LIB) gslgen$(EXE)

SRCS = ggcode.c ggpars.c ggeval.c ggcomm.c ggobjt.c ggfunc.c ggfile.c ggstrn.c gslgen.c

