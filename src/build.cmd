/*
 *  Build script for iMatix GSLgen Code Generator, for OS/2.
 *  Requires the iMatix 'c.cmd' script.
 *
 *  Generated by Otto v2.2 from buildgsl.txt on 100/02/20, 15:35:59
 *  For more info see Otto documentation at http://www.imatix.com.
 *  Bug reports & questions to <ewen@imatix.com>
 *  ---------------------------------------------------------------
 */
'@echo off'

/* Configuration options ------------------------------------------ 
 *
 * The actual programs use to compile, compile and archive, and 
 * link programs can be changed by editing the subroutines
 * CompileToObj, CompileToLib, and LinkProgram, at the bottom of
 * this script.  REXX doesn't support variable substitution in
 * the name of the called routine, so they cannot be defined here.
 */

SAY "Building the iMatix GSLgen Code Generator"
SAY "Press [Enter] to continue, or Ctrl-C to abort."
'if .%1==. pause >nul'
SAY "Checking for required files..."

/* require $LIB libsfl */
CALL AssertFileExists 'libsfl.a'

/* require ggcode.c ggcode.l ggcode.d ggcode.i ggcode.h */
CALL AssertFileExists 'ggcode.c'
CALL AssertFileExists 'ggcode.l'
CALL AssertFileExists 'ggcode.d'
CALL AssertFileExists 'ggcode.i'
CALL AssertFileExists 'ggcode.h'

/* require ggpars.c ggpars.l ggpars.d ggpars.i ggpars.h */
CALL AssertFileExists 'ggpars.c'
CALL AssertFileExists 'ggpars.l'
CALL AssertFileExists 'ggpars.d'
CALL AssertFileExists 'ggpars.i'
CALL AssertFileExists 'ggpars.h'

/* require gslgen.c gslgen.l gslgen.d gslgen.i */
CALL AssertFileExists 'gslgen.c'
CALL AssertFileExists 'gslgen.l'
CALL AssertFileExists 'gslgen.d'
CALL AssertFileExists 'gslgen.i'

/* require ggeval.c ggeval.h */
CALL AssertFileExists 'ggeval.c'
CALL AssertFileExists 'ggeval.h'

/* require ggcomm.c ggcomm.h */
CALL AssertFileExists 'ggcomm.c'
CALL AssertFileExists 'ggcomm.h'

/* require ggobjt.c ggobjt.h */
CALL AssertFileExists 'ggobjt.c'
CALL AssertFileExists 'ggobjt.h'

/* require ggfunc.c ggfunc.h */
CALL AssertFileExists 'ggfunc.c'
CALL AssertFileExists 'ggfunc.h'

/* require ggfile.c ggfile.h */
CALL AssertFileExists 'ggfile.c'
CALL AssertFileExists 'ggfile.h'

/* require ggstrn.c ggstrn.h */
CALL AssertFileExists 'ggstrn.c'
CALL AssertFileExists 'ggstrn.h'

/* require license.txt */
CALL AssertFileExists 'license.txt'

/* delete $lib libgsl */
'if exist libgsl.a del libgsl.a >nul'

/* library libgsl */

/* compile ggcode ggpars ggeval ggcomm ggobjt ggfunc ggfile ggstrn */
CALL CompileToLib 'ggcode' 'libgsl'
CALL CompileToLib 'ggpars' 'libgsl'
CALL CompileToLib 'ggeval' 'libgsl'
CALL CompileToLib 'ggcomm' 'libgsl'
CALL CompileToLib 'ggobjt' 'libgsl'
CALL CompileToLib 'ggfunc' 'libgsl'
CALL CompileToLib 'ggfile' 'libgsl'
CALL CompileToLib 'ggstrn' 'libgsl'

/* library */

/* compile gslgen */
CALL CompileToObj 'gslgen'

/* link    gslgen */
CALL LinkProgram 'gslgen'

exit 0
/* End script */

/* Utility subroutines ---------------------------------------------------- */

/* AssertFileExists <file>
 *
 * Checks to see if the specified file (argument 1) exists.  If it does the
 * subroutine returns.  If it doesn't, the subroutine displays an error
 * message, and exits the whole script.
 */

AssertFileExists:
fullpath = stream(ARG(1), 'C', 'QUERY EXISTS')
IF fullpath = "" THEN
DO
  SAY ARG(1) "missing -- aborting"
  exit 1
END

return

/* CompileToLib <source> <library>
 *
 * This is a stub routine to sort things out for compiling to a library.
 * We need to set CCLIBNAME to the name of the library, then call the 
 * 'c' script, then reset CCLIBNAME.  
 */

CompileToLib:

PARSE ARG SOURCE LIBRARY

oldenv  = VALUE('CCLIBNAME', LIBRARY, 'OS2ENVIRONMENT')
CALL c              SOURCE
CALL c '-r' LIBRARY SOURCE
LIBRARY = VALUE('CCLIBNAME', oldenv,  'OS2ENVIRONMENT')

return

/* CompileToObj <source>
 *
 * This is a stub routine to sort things out for compiling to an object.
 * We need to clear CCLIBNAME, then call c script with the "-c" parameter
 * to indicate compile only, and then reset CCLIBNAME again.
 */

CompileToObj:

SOURCE = ARG(1)

oldenv  = VALUE('CCLIBNAME', '',      'OS2ENVIRONMENT')
CALL c '-c' SOURCE
LIBRARY = VALUE('CCLIBNAME', oldenv,  'OS2ENVIRONMENT')

return

/* LinkProgram <name>
 *
 * This is a stub routine to sort out the things required for linking.
 * We call the c script with the "-L" parameter to link only.
 */

LinkProgram:

PROGRAM = ARG(1)
CALL c '-L' PROGRAM

return

/* End of Utility Subroutines (remaining functionality now in c.cmd) ------ */
